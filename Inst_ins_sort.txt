init:		li $s0, 0					# operation counter: $s0
			li $s1, 0x40000010			# peripheral addr: $s1
			li $gp, 0x0100				# data segment after $gp
			li $t0, 0x0F40				# display ----
			sw $t0, 0($s1)
rn_wait:	lw $t0, 16($s1)
			andi $t0, $t0, 4
			bne $t0, 4, rn_wait
			lw $t0, 12($s1)
			move $k0, $t0				# N: $k0
			sw $t0, 0($gp)
			andi $t1, $t0, 0xF			# display N
			sll $t1, $t1, 2
			lw $t1, 0($t1)
			addi $t1, $t1, 0x0F00
			sw $t1, 0($s1)
			li $t2, 12
rn_throw:	lw $t1, 16($s1)
			andi $t1, $t1, 4
			sub $t2, $t2, $t1
			bne $t2, $0, rn_throw
			li $t1, 0x0F08				# display ____
			sw $t1, 0($s1)
			li $t1, 0					# i: $t1 loop in [0, N) * 4
			sll $a0, $k0, 2
r_oloop:	slt $t2, $t1, $a0
			beq $t2, $0, main
			li $t2, 4					# j: $t2 loop in (0, 4]
			li $v0, 0					# get number in little endian way
r_iloop:	beq $t2, $0, r_iret
r_iwait:	lw $t3, 16($s1)
			bne $t3, 4, r_iwait
			lw $t3, 12($s1)
			sll $t3, $t3, 24
			srl $v0, $v0, 8	
			addi $t2, $t2, -1
			add $v0, $t3, $v0
			j r_iloop
r_iret:		add $t2, $t1, $gp
			sw $v0, 4($t2)				# save result in data segment
			addi $t1, $t1, 4
			j r_oloop

main:		move $t0, $k0				# N; $t0(stored in $k0)
			li $t1, 0x0F5C
			sw $t1, 0($s1)				# display oooo
			addi $a0, $gp, 4			# call insertion_sort
			move $a1, $k0
			addi $sp, $sp, -4
			sw $t0, 0($sp)
			jal is_call
			lw $t0, 0($sp)
			add $sp, $sp, 4
			sw $s0, 0($gp)
			j display

is_call:	addi $sp, $sp, -12
			sw $a0, 0($sp)
			sw $a1, 4($sp)
			sw $ra, 8($sp)
			li $t0, 1					# i: $t0 loop in [1, N)
is_loop:	slt $t3, $t0, $a1
			beq $t3, $0, is_ret
			move $a1, $t0
			add $sp, $sp, -4
			sw $t0, 0($sp)
			jal s_call
			move $a1, $v0
			lw $a2, 0($sp)
			jal i_call
			lw $t0, 0($sp)
			add $sp, $sp, 4
			lw $a1, 4($sp)
			add $t0, $t0, 1
			j is_loop
is_ret:		lw $ra, 8($sp)
			lw $a1, 4($sp)
			lw $a0, 0($sp)
			add $sp, $sp, 12
			jr $ra

s_call:		sll $t0, $a1, 2				# tmp: $t0
			add $t0, $t0, $a0
			lw $t0, 0($t0)
			addi $t1, $a1, -1			# i: $t1
s_loop:		slt $t3, $t1, $0
			bne $t3, $0, s_ret
			add $s0, $s0, 1
			sll $t2, $t1, 2				# v[i]: $t2
			add $t2, $t2, $a0
			lw $t2, 0($t2)
			slt $t3, $t0, $t2
			beq $t3, $0, s_ret
			addi $t1, $t1, -1
			j s_loop
s_ret:		add $v0, $t1, 1
			jr $ra

i_call:		addi $t0, $a2, -1			# &v[i]: $t0, initial: v[n-1]
			sll $t0, $t0, 2
			add $t0, $t0, $a0
			lw $t1, 4($t0)				# tmp: $t1
			sll $t2, $a1, 2				# &v[k]: $t2
			add $t2, $t2, $a0
i_loop:		slt $t3, $t0, $t2
			bne $t3, $0, i_ret
			lw $t3, 0($t0)
			sw $t3, 4($t0)
			addi $t0, $t0, -4
			j i_loop
i_ret:		sw $t1, 0($t2)
			jr $ra
			
display:	addi $a0, $k0, 1
			sll $a0, $a0, 2				# N + 1: $a0
			add $a0, $a0, $gp
			li $a1, 100					# j upper limit: $a1
			li $a2, 0x1000				# k upper limit: 0x1000
			move $t0, $gp				# i: $t0 loop in [0, N+1] with offset $gp
dis_oloop:	slt $t1, $t0, $a0
			beq $t1, $0, send
			li $t1, 0					# j: $t1 loop in [0, $a1)
dis_mloop:	slt $t2, $t1, $a1
			beq $t2, $0, dis_mret
			li $t2, 0x100				# k: $t2 loop in [0x100, 0x1000)
			lw $t9, 0($t0)				# display $t9
dis_iloop:	slt $t3, $t2, $a2
			beq $t3, $0, dis_iret
			andi $t3, $t9, 0xF
			sll $t3, $t3, 2
			lw $t4, 0($t3)
			or $t4, $t4, $t2			# combine bcd code with sel in k
			sw $t4, 0($s1)
			srl $t9, $t9, 4
			sll $t2, $t2, 1
			li $t5, 100000				# sleep for 1ms
sleep:		addi $t5, $t5, -1
			bne $t5, $0, sleep
			j dis_iloop
dis_iret:	addi $t1, $t1, 1
			j dis_mloop
dis_mret:	addi $t0, $t0, 4
			j dis_oloop

send:		li $t0, 0x0F23
			sw $t0, 0($s1)				# display ^^^^
			addi $a0, $k0, 1
			add $a0, $a0, $gp
			sll $a0, $a0, 2
			move $t0, $gp
send_oloop:	slt $t1, $t0, $a0
			beq $t1, $0, end
			lw $t9, 0($t0)
			lui $t1, 0xFF00				# send $t9 in big endian way
send_iloop:	beq $t9, $0, send_iret
			and $t2, $t1, $t9
			srl $t2, $t2, 24
			sw $t2, 8($s1)
send_wait:	lw $t3, 16($s1)
			bne $t3, 2, send_wait
			sll $t9, $t9, 8
			j send_iloop
send_iret:	addi $t0, $t0, 4
			j send_oloop
end:		li $t0, 0x0F71
			sw $t0, 0($s1)				# display FFFF
tail:		j tail
